# Factory Method Pattern - Java + Maven

Este proyecto implementa el patrón Factory Method en Java utilizando Maven como gestor de dependencias.
Incluye pruebas unitarias con JUnit 5 y está preparado para ejecutarse en IntelliJ IDEA.

## 📌 Estructura del Proyecto


```sh

FactoryMethod/
│── src/
│   ├── main/
│   │   ├── java/
│   │   │   ├── org.example/
│   │   │   │   ├── Application.java
│   │   │   │   ├── Button/
│   │   │   │   │   ├── Button.java
│   │   │   │   │   ├── HTMLButton.java
│   │   │   │   │   ├── LinuxButton.java
│   │   │   │   │   ├── MacButton.java
│   │   │   │   │   ├── WindowsButton.java
│   │   │   │   ├── CheckBox/
│   │   │   │   │   ├── CheckBox.java
│   │   │   │   │   ├── LinuxCheckBox.java
│   │   │   │   │   ├── MacCheckBox.java
│   │   │   │   │   ├── WebCheckBox.java
│   │   │   │   │   ├── WindowsCheckBox.java
│   │   │   │   ├── factory/
│   │   │   │   │   ├── Dialog.java
│   │   │   │   │   ├── LinuxDialog.java
│   │   │   │   │   ├── MacDialog.java
│   │   │   │   │   ├── WebDialog.java
│   │   │   │   │   ├── WindowsDialog.java
│   ├── test/
│   │   ├── java/
│   │   │   ├── org.example.factory/
│   │   │   │   ├── FactoryMethodTest.java
│── resources/
│── target/
│── .gitignore
│── pom.xml
│── README.md


```

## 🚀 Instalación y Ejecución

1️⃣**Clonar el repositorio**:

```bash

git clone https://github.com/tu-repositorio/factory-method-java.git
cd factory-method-java

```

2️⃣**Importar en IntelliJ IDEA**:

* Abrir IntelliJ IDEA.

* Seleccionar "Open Project" y elegir la carpeta del proyecto.

* IntelliJ detectará Maven automáticamente y descargará las dependencias.

* Esperar a que se resuelvan las dependencias.

3️⃣**Ejecutar la aplicación**:

```bash

mvn compile exec:java -Dexec.mainClass="factory.Application" -Dexec.args="Windows"

```

O desde IntelliJ:

* Abrir Application.java y ejecutar el método main().

## 🧪 Ejecutar Pruebas Unitarias

Para ejecutar las pruebas con JUnit 5:

```bash

mvn test

```

O desde IntelliJ:

* Ir al archivo FactoryMethodTest.java y hacer clic derecho -> Run Tests.

## 📜 Descripción del Patrón Factory Method

El Factory Method es un patrón de diseño creacional que permite a las subclases decidir qué tipo de objeto crear.

## 📌 Implementación

- `Dialog` → Clase abstracta con los métodos fábrica `createButton()` y `createCheckBox()`.
- `WindowsDialog`, `WebDialog`, `MacDialog`, `LinuxDialog` → Implementan `createButton()` y `createCheckBox()`, creando instancias de `Button` y `CheckBox` según el sistema.
- `Button` → Interfaz con los métodos `render()` y `onClick()`.
- `WindowsButton`, `MacButton`, `LinuxButton`, `HTMLButton` → Implementaciones concretas de `Button`.
- `CheckBox` → Interfaz con los métodos `render()` y `onToggle()`.
- `WindowsCheckBox`, `MacCheckBox`, `LinuxCheckBox`, `WebCheckBox` → Implementaciones concretas de `CheckBox`.
- `Application` → Clase principal que selecciona el tipo de `Dialog` según la configuración del sistema.

## 🛠️ Dependencias Maven

## 📌 Archivo pom.xml

```xml

<dependencies>
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-api</artifactId>
        <version>5.9.2</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-engine</artifactId>
        <version>5.9.2</version>
        <scope>test</scope>
    </dependency>
</dependencies>

```

